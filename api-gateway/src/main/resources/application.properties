spring.application.name=api-gateway
server.port=8080

#significa que las instancias de servicio prefieren registrarse usando sus direcciones IP en lugar de sus nombres de host.
eureka.instance.prefer-ip-address=true

#EurekaServer cliente -> Se le agregó seguridad basica a la conexion con el servidor
eureka.client.service-url.default-zone=http://eureka:password@localhost:8761/eureka
#Eureka nombre de este cliente + un numero aleatorio al final por si existen varias instancias de este servicio
eureka.instance.instance-id=${spring.application.name}:${spring.application.instance_id:${random.value}}

#Inventory service routes
spring.cloud.gateway.routes[0].id=inventory-service
spring.cloud.gateway.routes[0].uri=lb://inventory-service
spring.cloud.gateway.routes[0].predicates[0]=Path=/api/inventory/**

#Order service routes
spring.cloud.gateway.routes[1].id=orders-service
spring.cloud.gateway.routes[1].uri=lb://orders-service
spring.cloud.gateway.routes[1].predicates[0]=Path=/api/orders/**

#Product service routes
spring.cloud.gateway.routes[2].id=products-service
spring.cloud.gateway.routes[2].uri=lb://products-service
spring.cloud.gateway.routes[2].predicates[0]=Path=/api/products/**

#Logs
logging.level.root=info
logging.level.org.springframework.cloud.gateway=trace
logging.level.org.springframework.cloud.gateway.route.RouteDefinitionRouteLocator=info

##SEGURIDAD

#Discovery Server Routes
spring.cloud.gateway.routes[3].id=discovery-service
spring.cloud.gateway.routes[3].uri=http://localhost:8761
spring.cloud.gateway.routes[3].predicates[0]=Path=/eureka/web
spring.cloud.gateway.routes[3].filters[0]=SetPath=/

#Discovery Server Static Routes -> para que se vean las imagenes y recursos que se muestran en la interfaz web de Eureka
spring.cloud.gateway.routes[4].id=discovery-service-static
spring.cloud.gateway.routes[4].uri=http://localhost:8761
spring.cloud.gateway.routes[4].predicates[0]=Path=/eureka/**

#Actuator Routes
#Inventory actuator routes
spring.cloud.gateway.routes[5].id=inventory-service-actuator
spring.cloud.gateway.routes[5].uri=lb://inventory-service/actuator/inventory/**
spring.cloud.gateway.routes[5].predicates[0]=Path=/actuator/inventory/**

#Orders actuator routes
spring.cloud.gateway.routes[6].id=orders-service-actuator
spring.cloud.gateway.routes[6].uri=lb://orders-service/actuator/orders/**
spring.cloud.gateway.routes[6].predicates[0]=Path=/actuator/orders/**

#Products actuator routes
spring.cloud.gateway.routes[7].id=products-service-actuator
spring.cloud.gateway.routes[7].uri=lb://products-service/actuator/products/**
spring.cloud.gateway.routes[7].predicates[0]=Path=/actuator/products/**

#Filtros agregados para definir el comportamiento de enrutamiento y manipulacion de sesiones y tokens de autenticacion
spring.cloud.gateway.default-filters[0]=SaveSession
spring.cloud.gateway.default-filters[1]=TokenRelay

#Keycloak
spring.security.oauth2.client.provider.keycloak.issuer-uri=http://localhost:8181/realms/microservices-realm
spring.security.oauth2.client.registration.keycloak.scope=openid
spring.security.oauth2.client.registration.keycloak.client-id=microservices_client
spring.security.oauth2.client.registration.keycloak.authorization-grant-type=authorization_code
spring.security.oauth2.resourceserver.jwt.jwt-set-uri=http://localhost:8181/realms/microservices-realm/protocol/openid-connect/certs

#Actuator
management.endpoints.web.exposure.include=health
management.endpoints.web.base-path=/actuator

#Tracing
#uri del servidor de zipkin donde se envian las trazas de la aplicacion
management.zipkin.tracing.endpoint=http://localhost:9411/api/v2/spans
#establece la taza de probabilidad de muestreo de las tazas generadas. Esto establece que el 100 por ciento de las trazas son generadas, reduce el rendimiento. COmo ejemplo se establece uno pero deberia ser un 0.1 en ambientes reales
management.tracing.sampling.probability=1.0

logging.pattern.level=%5p [${spring.application.name}, %X{traceId:-}, %X{spanId:-}]