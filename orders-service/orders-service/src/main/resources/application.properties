spring.application.name=orders-service
server.port=8082

spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
spring.datasource.url=jdbc:mysql://localhost:3306/ms_orders
spring.datasource.user=Juanem
spring.datasource.password=root

#significa que las instancias de servicio prefieren registrarse usando sus direcciones IP en lugar de sus nombres de host.
eureka.instance.prefer-ip-address=true
#EurekaServer URL
eureka.client.service-url.default-zone=http://eureka:password@localhost:8761/eureka
#Eureka nombre de este cliente + un numero aleatorio al final por si existen varias instancias de este servicio
eureka.instance.instance-id=${spring.application.name}:${spring.application.instance_id:${random.value}}

##SEGURIDAD
#Keycloak -> esta clave la utiliza el servidor de recursos para validar la autenticidad e integridad de las claves jwt
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://localhost:8181/realms/microservices-realm/protocol/openid-connect/certs

#Actuator
management.endpoints.web.exposure.include=health
management.endpoints.web.base-path=/actuator/orders
#Para ver como cambian los estados de este servicio agregamos
management.endpoint.health.show-details=always
management.health.circuitbreakers.enabled=true

#RESILIENCE4J - CircuitBreaker
resilience4j.circuitbreaker.instances.orders-service.register-health-indicator=true
#si el numero de fallas consecutivo, alcanza el umbral definido dentro de la ventana deslizante, el circuitbreaker se abrira y bloqueara todas las solicitudes al servicio externo o dependencia ext
resilience4j.circuitbreaker.instances.orders-service.sliding-window-size=5
resilience4j.circuitbreaker.instances.orders-service.sliding-window-type=count_based
#% de llamadas fallidas antes de q se abra el circuitbreaker
resilience4j.circuitbreaker.instances.orders-service.failure-rate-threshold=50
#tiempo de espera para una nueva llamada al servicio externo
resilience4j.circuitbreaker.instances.orders-service.wait-duration-in-open-state=10s
#transicion automatica de cambio de estado luego de la espera de los 10s seteados arriba
resilience4j.circuitbreaker.instances.orders-service.automatic-transition-from-open-to-half-open-enabled=true
#cantidad de llamadas permitidas en el estado medio abierto
resilience4j.circuitbreaker.instances.orders-service.permitted-number-of-calls-in-half-open-state=3

#KAFKA PRODUCER CONFIGURATION
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.producer.retries=1
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer

#Tracing
#uri del servidor de zipkin donde se envian las trazas de la aplicacion
management.zipkin.tracing.endpoint=http://localhost:9411/api/v2/spans
#establece la taza de probabilidad de muestreo de las tazas generadas. Esto establece que el 100 por ciento de las trazas son generadas, reduce el rendimiento. COmo ejemplo se establece uno pero deberia ser un 0.1 en ambientes reales
management.tracing.sampling.probability=1.0

logging.pattern.level=%5p [${spring.application.name}, %X{traceId:-}, %X{spanId:-}]
logging.level.root=debug