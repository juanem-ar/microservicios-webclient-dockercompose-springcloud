spring.application.name=products-service
server.port=8081

spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.datasource.url=jdbc:postgresql://localhost:5432/ms_products
spring.datasource.user=Juanem
spring.datasource.password=root

#significa que las instancias de servicio prefieren registrarse usando sus direcciones IP en lugar de sus nombres de host.
eureka.instance.prefer-ip-address=true
#EurekaServer URL
eureka.client.service-url.default-zone=http://eureka:password@localhost:8761/eureka
#Eureka nombre de este cliente + un numero aleatorio al final por si existen varias instancias de este servicio
eureka.instance.instance-id=${spring.application.name}:${spring.application.instance_id:${random.value}}

##SEGURIDAD
#Keycloak -> esta clave la utiliza el servidor de recursos para validar la autenticidad e integridad de las claves jwt
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://localhost:8181/realms/microservices-realm/protocol/openid-connect/certs

#Actuator
management.endpoints.web.exposure.include=health
management.endpoints.web.base-path=/actuator/products

#Tracing
#uri del servidor de zipkin donde se envian las trazas de la aplicacion
management.zipkin.tracing.endpoint=http://localhost:9411/api/v2/spans
#establece la taza de probabilidad de muestreo de las tazas generadas. Esto establece que el 100 por ciento de las trazas son generadas, reduce el rendimiento. COmo ejemplo se establece uno pero deberia ser un 0.1 en ambientes reales
management.tracing.sampling.probability=1.0

logging.pattern.level=%5p [${spring.application.name}, %X{traceId:-}, %X{spanId:-}]
logging.level.root=debug